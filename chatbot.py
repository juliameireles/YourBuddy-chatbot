import streamlit as st
import google.generativeai as genai
import random
import os

# Substitua pela sua chave de API Gemini
genai.configure(api_key=os.getenv("SUA_GEMINI_API_KEY"))

modelo = genai.GenerativeModel(model_name="models/gemini-1.5-pro-latest")



sugestoes_gerais = [
    "Feche os olhos por 5 segundos e foque apenas no som da sua respiraÃ§Ã£o, mesmo com o barulho ao redor.",
    "Tente relaxar a mandÃ­bula, os ombros e as mÃ£os â€” tensionamos isso sem perceber.",
    "Lembre-se: o que estÃ¡ ao seu redor Ã© temporÃ¡rio. Respire fundo e repita mentalmente: 'Eu estou segura agora.'",
    "Desvie sua atenÃ§Ã£o do caos ao redor e foque em algo pequeno e fixo â€” como um objeto no bolso ou uma cor no ambiente.",
    "Coloque uma mÃºsica ou som calmo com fone de ouvido, se possÃ­vel, mesmo que seja por 1 minuto.",
    "FaÃ§a 3 respiraÃ§Ãµes lentas e conscientes.",
    "Toque seu pulso ou aperte levemente sua mÃ£o. Isso pode ajudar a ancorar vocÃª no presente.",
    "Feche os olhos por alguns segundos e pense em um lugar onde vocÃª se sente segura â€” visualize esse lugar.",
    "Mentalize uma frase curta como 'Eu vou passar por isso', ou 'O barulho estÃ¡ fora, minha calma estÃ¡ dentro'.",
    "Se puder, tire um tempinho para ir ao banheiro ou tomar uma Ã¡gua â€” sÃ£o pequenas pausas que renovam.",
]



# SugestÃµes especÃ­ficas para lugares caÃ³ticos
sugestoes_caoticas = [
    "Relaxe a mandÃ­bula, os ombros e as mÃ£os. VocÃª pode fazer isso agora mesmo, onde estiver.",
    "Foque por 5 segundos em um objeto ao seu redor. Traga sua mente para o presente.",
    "Repita mentalmente: 'Eu posso passar por isso. Minha calma estÃ¡ comigo.'",
    "Feche os olhos por 5 segundos, mesmo com barulho. SÃ³ foque no som da sua respiraÃ§Ã£o.",
    "Se possÃ­vel, coloque um fone e ouÃ§a um som que te traga paz â€” mesmo que seja sÃ³ por 1 minuto.",
]


# Detecta se a situaÃ§Ã£o descrita Ã© caÃ³tica
def detectar_situacao(mensagem):
    mensagem = mensagem.lower()
    palavras_caoticas = ["Ã´nibus", "trabalho", "barulho", "gente", "festa", "ruÃ­do", "fila", "metrÃ´", "lugar cheio", "aperto", "nÃ£o posso sair"]

    for palavra in palavras_caoticas:
        if palavra in mensagem:
            return "caotico"
    return "geral"


# Interface com Streamlit
st.set_page_config(page_title="YourBuddy ðŸŒ¿", layout="centered")
st.title("ðŸ§˜ YourBuddy - Desabafe sem julgamentos ðŸŒ¿")
st.markdown("Sinta-se Ã  vontade para desabafar. O YourBuddy vai te ouvir com carinho e cuidado ðŸ’›")

mensagem = st.text_area("Como vocÃª estÃ¡ se sentindo agora?", height=150)


if st.button("Enviar"):
    with st.spinner("YourBuddy estÃ¡ refletindo com carinho..."):
        prompt = f"""
        VocÃª Ã© um chatbot terapÃªutico, acolhedor e empÃ¡tico.
        A pessoa desabafou o seguinte: "{mensagem}"

        Responda com acolhimento, com atÃ© 4 frases. 
        Use uma linguagem leve e reconfortante, como um terapeuta gentil, sem dar diagnÃ³sticos clÃ­nicos.
        """
        resposta = modelo.generate_content(prompt)

        st.success("ðŸ’¬ Resposta do YourBuddy:")
        st.markdown(f"> {resposta.text.strip()}")

        tipo = detectar_situacao(mensagem)
        sugestao = random.choice(sugestoes_caoticas if tipo == "caotico" else sugestoes_gerais)
        st.markdown("ðŸŒ¿ **Dica de autocuidado:**")
        st.info(sugestao)